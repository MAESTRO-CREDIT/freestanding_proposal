<pre class='metadata'>
Title: Make Exceptions and Company Optional for Freestanding Implementations
Shortname: D0000
Revision: 0
Audience: SG14, EWG
Status: D
Group: WG21
URL: https://wg21.link/index.html
!Source: <a href="https://github.com/ben-craig/freestanding_proposal/blob/master/core/optional_exceptions.bs">github.com/ben-craig/freestanding_proposal/blob/master/core/optional_exceptions.bs</a>
Editor: Ben Craig &lt;ben dot craig at gmail dot com&gt;
Abstract: Making core language features (like exceptions) optional in freestanding mode if they have an OS dependency or incur space overhead.
Markup Shorthands: markdown yes
</pre>

Introduction {#intro}
=====================
Conforming C++ toolchains are ill-suited to target kernel and embedded domains.  In practice, kernel and embedded developers almost always use compiler switches that make the toolchain non-conforming.  This means that conforming C++ has left room for a lower level language: non-conforming C++.  WG21 needs to decide between the lesser of several evils: formalizing a dialect, leaving room for a lower level language, or massive breakage in real code.  This paper proposes formalizing a dialect.

It is my intent that this be the least bad form of dialect, the proper subset.  All valid freestanding libraries should be valid hosted libraries with compatible semantics.

In [[P0829]], I propose adding library features to the paper that should work everywhere.  This paper covers the removal of features that don't work everywhere.  There is already standards precedent in [support.signal](http://eel.is/c++draft/support.signal#3) for avoiding portions of all the features that I am making optional.

There are years, if not decades of field experience using C++ subsets similar to what I am proposing ([[OSR]]).  The workarounds and compiler switches are mostly available today.  The main places where this paper innovates is in places where we can keep more features than current compiler based switches allow.

In theory, this paper would result in large scale code breaks for existing freestanding users.  In practice, there are almost no existing freestanding users because the current definition is not serving the stated purpose of working ["without the benefit of an operating system"](http://eel.is/c++draft/intro.compliance#7).  I believe that the embedded and kernel C++ community is better served by explicitly omitting functionality, rather than providing conforming, but low quality, highly unsatisfactory implementations.  Missing functionality sends a clear signal to library writers, where low quality implementations provide an easier to miss message.

Note that freestanding implementations can (and should) make available all the features that are implementable on their target environment.  For example, there are many embedded systems where floating point operations are desirable, but heap allocations are not.  Each cluster of features will get its own feature test macro.  This has the effect of making all implementations compliant that are "between" the bare minimum freestanding and the full hosted implementation.

Value of standardization {#value}
=================================
What benefit does standardization bring to the kernel and embedded communities?  Kernel and embedded developers seem to be getting work done in non-conforming C++, so why should WG21 change course?

First, I will answer those questions with another question: Why bring any proposal into the standard?  Presumably the authors of those proposals could get work done without the proposal.  Proposal authors are resourceful people, and can probably implement their papers in a fork of an existing compiler or standard library.  Yet they go through the hassle and expense of presenting papers to WG21 anyway.

By making freestanding useful, I will be providing a target for toolchain and library authors.  Library authors that wish to make their libraries as portable as possible will have a standardized lowest common denominator to write against.  Purchasers will be better able to make requests of their vendors for freestanding compliant products.  Educators will be better able to teach about the requirements of kernel and embedded programming.  Tool vendors can better prioritize work on conforming compiler modes, and possibly reject new, ad-hoc non-conforming modes.  Users can get uniform behavior on what is currently an inconsistent set of vendor extensions.

Before-and-after tables {#tony}
===============================
<table>
  <tr>
    <th>Standard says this should work</th>
    <th>Today's reality</th>
    <th>Proposed conforming freestanding behavior</th>
  </tr>

  <tr>
    <td>`throw 0;`</td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error C2980: C++ exception handling is not supported with /kernel
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "__cxa_allocate_exception"
      <br/>undefined reference to "__cxa_throw"
      <br/>undefined reference to "typeinfo for int"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "__exidx_end"
      <br/>undefined reference to "__exidx_start"
      <br/>undefined reference to "_exit"
      <br/>undefined reference to "_sbrk"
      <br/>undefined reference to "_kill"
      <br/>undefined reference to "_getpid"
      <br/>undefined reference to "_write"
      <br/>undefined reference to "_close"
      <br/>undefined reference to "_fstat"
      <br/>undefined reference to "_isatty"
      <br/>undefined reference to "_lseek"
      <br/>undefined reference to "_read"
    </td>
    <td><b>Proposed option:</b>
      <br/>Undefined behavior if `throw 0;` is executed and exceptions are not enabled.  This is similar to how `throw;` currently calls std::terminate() if executed outside of a `catch` block.
      <br/>
      <br/><b>Alternative to be polled:</b>
      <br/>Ill-formed if exceptions are not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>try { foo(); }
catch(...) {throw;}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error C2980: C++ exception handling is not supported with /kernel
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "__cxa_begin_catch"
      <br/>undefined reference to "__cxa_rethrow"
      <br/>undefined reference to "__cxa_end_catch"
      <br/>undefined reference to "_Unwind_Resume"
      <br/>undefined reference to "__gxx_personality_v0"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "__exidx_end"
      <br/>undefined reference to "__exidx_start"
      <br/>undefined reference to "_exit"
      <br/>undefined reference to "_sbrk"
      <br/>etc...
    </td>
    <td><b>Proposed option:</b>
      <br/>This code is allowed everywhere, except in signal handlers:
      <br/><code><pre>try { foo(); }
catch(...) {throw;}</pre></code>
      <br/>When exceptions aren't present, `try` and `catch` generate no code.
    </td>
  </tr>

  <tr>
    <td><code><pre>struct B {virtual void f() {}};
struct D : B {virtual void f() {}};
D *func(B *b) {
    return dynamic_cast&lt;D*&gt;(b);
}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error C2981: the dynamic form of "dynamic_cast" is not supported with /kernel
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "__dynamic_cast"
      <br/>undefined reference to "vtable for __cxxabiv1::__si_class_type_info"
      <br/>undefined reference to "vtable for __cxxabiv1::__class_type_info"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "__exidx_end"
      <br/>undefined reference to "__exidx_start"
      <br/>undefined reference to "_exit"
      <br/>undefined reference to "_sbrk"
      <br/>etc...
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if RTTI is not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>#include &lt;typeinfo&gt;
struct B {virtual void f() {}};
const bool func(B &b) {
    return typeid(b) == typeid(int);
}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error C2981: the dynamic form of "typeid" is not supported with /kernel
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "typeinfo for int"
      <br/>undefined reference to "strcmp"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "__exidx_end"
      <br/>undefined reference to "__exidx_start"
      <br/>undefined reference to "_exit"
      <br/>undefined reference to "_sbrk"
      <br/>etc...
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if RTTI is not enabled.
    </td>
  </tr>

  <tr>
    <td>`void f(int *i) {delete i;}`</td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error LNK2019: unresolved external symbol "void __cdecl operator delete(void *)"
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "operator delete(void*, unsigned long)"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "_sbrk"
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if the heap is not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>struct B {virtual ~B() {} };
void foo() {B b;}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error LNK2019: unresolved external symbol "void __cdecl operator delete(void *,unsigned)"
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "operator delete(void*, unsigned long)"
      <br/>undefined reference to "vtable for __cxxabiv1::__class_type_info"
    </td>
    <td><b>Proposed option:</b>
      <br/>Well-formed, even if the heap is not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>int foo() {
    thread_local int x = 0;
    ++x;
    return x;
}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error C2949: thread_local is not supported with /kernel
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>successfully compiles, but corrupts memory associated with thread control block
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if thread-local storage is not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>double doubler(double x) {
    return x * 2.0;
}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>successfully compiles, and corrupts user-mode floating point application state
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>successfully compiles, and even works, at the expense of 1052 bytes of floating point addition library code
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if floating point support is not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>void handler();
void foo() {
    atexit(handler);
}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>error LNK2019: unresolved external symbol "int atexit(void)"
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "atexit"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "_sbrk"
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if dynamic initialization and tear-down support is not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>struct Obj {Obj();};
void foo() {
    static Obj obj;
}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>successfully compiles, but generates thread unsafe initialization for `obj`.
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "__cxa_guard_acquire"
      <br/>undefined reference to "__cxa_guard_release"
      <br/>undefined reference to "__cxa_guard_abort"
      <br/>undefined reference to "_Unwind_Resume"
      <br/>undefined reference to "__gxx_personality_v0"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "__exidx_end"
      <br/>undefined reference to "__exidx_start"
      <br/>undefined reference to "_exit"
      <br/>undefined reference to "_sbrk"
      <br/>etc...
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if blocking support is not enabled.
    </td>
  </tr>

  <tr>
    <td><code><pre>struct BigData {
    int d[16];
};

void foo(
    std::atomic<BigData> &lhs,
    const BigData &rhs)
{lhs = rhs;}</pre></code></td>
    <td><b>Visual Studio 2017, /kernel</b>
      <br/>successfully compiles, but generates spin locks that are dangerous when shared with interrupts.
      <br/>
      <br/><b>gcc 8.1 and clang 6.0.0, -nostdlib</b>
      <br/>undefined reference to "__atomic_store"
      <br/>
      <br/><b>Bare metal gcc 4.8 with newlib</b>
      <br/>undefined reference to "__atomic_store"
    </td>
    <td><b>Proposed option:</b>
      <br/>Ill-formed if blocking support is not enabled.
    </td>
  </tr>

</table>

`noexcept` comparisons{#tony_noexcept}
--------------------------------------
[[#exceptions]] describes several potential changes to noexcept for environments without exceptions.  The following declarations will be used to illustrate the differences.
<code><pre>extern "C" void extern_c();
void plain();
void noexcept_false() noexcept(false);
void noexcept_true() noexcept;</pre></code>
The following table shows the results of the `noexcept` operator in the expression `noexcept(column_header())`.  Highlighted cells indicate places where there is a deviation from C++17 standard behavior.
<table>
  <tr>
    <th></th>
    <th>`extern_c`</th>
    <th>`plain`</th>
    <th>`noexcept_false`</th>
    <th>`noexcept_true`</th>
  </tr>
  <tr><td><b>Modes with exceptions</b></td><td/><td/><td/><td/></tr>
  <tr>
    <td>C++17</td>
    <td>false</td>
    <td>false</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr>
    <td>gcc 8.1, clang 6.0, icc 18.0</td>
    <td>false</td>
    <td>false</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr>
    <td>MSVC 2017 RTW /EHs</td>
    <td>false</td>
    <td>false</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr>
    <td>MSVC 2017 RTW /EHsc</td>
    <td bgcolor="green">true</td>
    <td>false</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr><td><b>Modes without exceptions</b></td><td/><td/><td/><td/></tr>
  <tr>
    <td>MSVC 2017 RTW</td>
    <td>false</td>
    <td>false</td>
    <td>false</td>
    <td>true</td>
  </tr>

  <tr>
    <td>gcc 8.1, clang 6.0, -fno-exceptions</td>
    <td>false</td>
    <td>false</td>
    <td>false</td>
    <td>true</td>
  </tr>
  <tr>
    <td>icc 18.0 -fno-exceptions</td>
    <td bgcolor="green">true</td>
    <td bgcolor="green">true</td>
    <td bgcolor="green">true</td>
    <td>true</td>
  </tr>
  <tr>
    <td>Proposed</td>
    <td bgcolor="green">true</td>
    <td bgcolor="green">true</td>
    <td>false</td>
    <td>true</td>
  </tr>
  <tr>
    <td>Alternative 1</td>
    <td>false</td>
    <td>false</td>
    <td>false</td>
    <td>true</td>
  </tr>
  <tr>
    <td>Alternative 2</td>
    <td bgcolor="green">true</td>
    <td bgcolor="green">true</td>
    <td bgcolor="green">true</td>
    <td>true</td>
  </tr>
</table>

Features going optional {#features}
===================================
The following applies only to freestanding mode.  Hosted mode will remain unchanged.

Exceptions {#exceptions}
------------------------
This section applies to "dynamic" exceptions.  In other words, the exceptions we have had since C++98.  [[P0709]] could add "static" exceptions.  I am keeping static exceptions in mind with this design, but I'm not providing any wording against that proposal.

### Why make this optional? ### {#exception_why}
Kernel and embedded environments can't universally afford exceptions.  Throwing an exception requires a heap allocation on the Itanium ABI, and a large stack allocation in the Microsoft ABI, neither of which are suitable in kernel and embedded environments.  Throwing an exception requires TLS ([[#tls]]) in order to propagate the number of uncaught exceptions.  Windows, Linux, Mac, and FreeBSD don't allow drivers to store arbitrary TLS data, and they don't have any special handling for C++ specific TLS requirements, like the number of uncaught exceptions.

Even when exceptions aren't thrown, there is a large space cost.  Table based exception costs grow roughly in proportion to the size and complexity of the program, and not in the number of `throw` sites, `catch` sites, or frames traversed in an exception `throw`.  Since table based exception costs grows with program size, rather than how much it is used, it is not zero overhead.  `setjmp` / `longjmp` exception size costs are similar in these regards.

See [[P0709]] for further discussion on the problems with exceptions.

### What isn't changing? ### {#exception_same}
`try` and `catch` are both still allowed.  Compilers should treat `catch` blocks as unreachable code.  `try` and `catch` blocks are allowed so that exception neutral code can be shared between freestanding and hosted implementations without requiring preprocessor hackery.

### What am I changing (and why)? ### {#exception_what}
Evaluating a `throw` expression in an environment without exception support is undefined behavior.  We allow the programmer to compile with a `throw` to allow exception neutral code to be shared between freestanding and hosted implementations, but the `throw` shouldn't ever be evaluated, since we shouldn't be able to get into a `catch` block.  We allow `throw` expressions with operands so that programmers can do exception translation in environments with exceptions, with the expectation that the code won't ever be executed in exceptionless environments.  For `throw` expressions without operands, this will be a change in behavior.  A rethrow without an active exception currently calls `std::terminate`.  I don't call `std::terminate`, as `std::terminate` relies on the global terminate handler, and freestanding doesn't want to pay the cost of synchronizing the global terminate handler.

Implementations are encouraged to produce warnings on any `throw` expression with operands, as well as allow suppressions for informing the compiler when those `throw`s are actually there for exception translation purposes.

When a function without a `noexcept` specification is passed to a `noexcept` expression, `noexcept` will return true if exception support is not present.  This will speed up operations like `move_if_noexcept` and containers with strong exception guarantees.  This also differs somewhat from existing practices.  Visual Studio, clang, and gcc do not currently adjust the value of `noexcept` when exceptions are off.  The Intel compiler (with EDG frontend) makes the `noexcept` operator unconditionally return true when exceptions are turned off.  In addition, Visual Studio has a compiler mode, /EHsc, that takes `extern "C"` functions and makes them `noexcept`.  Note that this approach leaves the door open for static exceptions to use `noexcept`.

`noexcept(false)` code should be treated with suspicion.  This isn't normative, but it would be a useful place for compilers to warn.

The `<exception>` header is not required to be present.  Note that this removes `std::terminate` and `uncaught_exceptions`.

Types derived from `std::exception` are not required to be present in their respective headers.

`std::visit` is no longer required to throw `std::bad_variant_access`, as it will now be impossible to get into the `valueless_by_exception` state.

`catch` blocks are treated the same as an `if constexpr(false)` block.  This is to allow some trivial exception translation to continue compiling.

### Alternative designs ### {#exception_alt}
1. No change to `noexcept` expression

  `noexcept` would continue to assume that a function without a `noexcept` specifier could throw.  We have the most experience with this option (Clang, gcc, and Visual Studio implement it), but it also leaves the most unexploited performance, as it pessimizes `move_if_noexcept`, `vector`, and other facilities that query `noexcept`.

2. `noexcept` expressions always return true

  Intel icc currently implements this option.  This opens us up to breakage if some other proposal gives meaning to `noexcept` on platforms without dynamic exceptions.  Having `noexcept` directly contradict a `noexcept(false)` specification seems wrong as well.

3. Make `noexcept` ill-formed

  Visual Studio currently warns when it sees a `noexcept` specifier while exceptions are disabled.  This option would make it very difficult to share code between freestanding and hosted.  Libraries attempting to target both would most likely resort to a macro that conditionally expands to `noexcept`.

4. `throw` UB vs. ill-formed

  We could make some or all `throw` expressions ill-formed.  The benefit is that compilers could more reliably produce diagnostics.  The cost is that it would be more difficult to share exception neutral code between hosted and freestanding.

RTTI {#rtti}
------------
### What am I changing? ### {#rtti_what}
`typeid` and `dynamic_cast` are ill-formed in environments without RTTI.  The `<typeinfo>` header is not required to be present.

### Why? ### {#rtti_why}
`type_info` objects generated by the compile consume space, and are difficult to optimize away.  In the implementations that I'm aware of, a class with virtual functions will have a spot in the vtable that points at the `type_info` object for the class.  If an instance of the class is every created, the linker isn't able to apply trivial dead data elimination techniques to get rid of the `type_info` object, as there exists a reference to the object from the vtable.

The slot in the vtable itself is also a place where space is wasted.

If `typeid` and `dynamic_cast` can't be called, implementations can safely remove the `type_info` objects, saving space.  Some ABIs will even permit reclaiming the vtable slot.

Default heap storage {#heap}
----------------------------
### What isn't changing? ### {#heap_same}
Non-allocating placement `::operator new` and `::operator delete` will still be present.

### What am I changing? ### {#heap_what}
On systems without default heap storage, neither the replaceable allocation functions nor the replaceable deallocation functions are provided by default.

The presence of a `virtual` destructor shall not require `::operator delete` to be provided unless an instance of the object is created with `new`.

### Why? ### {#heap_why}
Many embedded systems do not have a heap.  Such a system could provide an implementation of `::operator new` that immediately throws `bad_alloc`, but that would require pulling in all the exception handling machinery.  Returning `nullptr` would not be conforming, and would also take up a non-zero amount of space.

Many kernel systems have multiple pools of memory, none of which is suitable as a default.  In the Microsoft Windows kernel, developers have the choice of paged pool, which is plentiful and dangerous; and non-paged pool, which is safe and scarce.  The National Instruments codebase has had experience using each of those options as a default, and both have proven problematic.  The Microsoft Visual Studio compiler switch `/kernel` already implements the lack of default allocation functions. [[kernel_switch]]

In current implementations of `virtual` destructors, the class's vtable points at a stub function that calls the "real" destructor, then calls `::operator delete`.  This places a burden on freestanding users of hosted code, even when the freestanding users aren't using `new` and `delete`.  It seems reasonable to allow a freestanding class to have a `virtual` destructor, so long as the class is never `new`ed or `delete`ed.  Hosted uses of the class can `new` and `delete` all they want.

Thread local storage {#tls}
---------------------------
### What am I changing? ### {#tls_what}
Programs using the `thread_local` storage class specifier are ill-formed if the environment does not provide thread local storage.

### Why? ### {#tls_why}
Thread local storage requires cooperation from the operating system.

For embedded platforms, there may not be an operating system.  Implementing thread local storage on those platforms would be extra runtime overhead.

For kernel platforms, and drivers in particular, the operating system may be owned by a third party.  The third party may not provide arbitrary thread local storage for plugins.  Neither Linux, Microsoft Windows, Apple OSX, FreeBSD, nor OpenRTOS support arbitrary thread local storage in the kernel.

Floating point {#float}
-----------------------
### What am I changing? ### {#float_what}
The `float`, `double`, and `long double` types are ill-formed if the environment does not have floating point support.

`<cfloat>` is not required to be present in environments without floating point support.  `numeric_limits<floating point type>` is not required to be present in environments without floating point support.

### Why? ### {#float_why}
Many embedded processors do not have floating point units.  The cost for the first usage of floating point is very high, as that pulls in floating point emulation libraries.

In kernel environments, floating point operations are avoided.  The system call interface from user mode to kernel mode normally does a partial context switch, where it saves off the old values of registers, so that they can be restored when returning to user mode.  In order to make user / kernel transitions fast, operating systems usually don't save or restore the floating point state.  This means that using floating point in the kernel ends up corrupting the user mode program's floating point state.

Program start-up and termination {#startup_termination}
-------------------------------------------------------
### What isn't changing ### {#startup_termination_same}
[basic.start.main](http://wg21.link/basic.start.main) already makes start-up and termination implementation defined for freestanding implementations.  I interpret this as meaning that neither static initialization nor dynamic initialization is required to take place.  This also means that non-local object destruction is implementation defined.

### What am I changing? ### {#startup_termination_what}
The existence of `atexit`, `at_quick_exit`, `exit`, and `quick_exit` should also be implementation defined (i.e. optional).

### Why? ### {#startup_termination_why}
These functions require space overhead, and are difficult to optimize away.  Process termination code iterates over the contents of the `atexit` list, pinning the memory in place.

Language mandated blocking {#blocking}
--------------------------------------
### What am I changing? ### {#blocking_what}
In environments without blocking support, dynamic initialization of function statics and non-lock-free atomics are ill-formed.

In practice, this won't require changes from toolchain vendors.  On unknown environments, the C++ runtime functions necessary to implement locked atomics and dynamic initialization of function statics generally aren't provided.  This results in linker errors, satisfying the ill-formed requirement.  This change will make such a toolchain conforming.

### Why? ### {#blocking_why}
Blocking is hard and not universally portable.

On a system without an OS, your main blocking choices are disabling interrupts and spin locks.  Spin locks are needed to synchronize among multiple hardware threads, and disabling interrupts is required when synchronizing a processor with itself.  Neither blocking technique is universally applicable, even when limited to the realm of OS-less systems.

In the Windows kernel, there are multiple types of locks.  No one lock type is appropriate in all situations.

The CRECT RTOS [[CRECT]] doesn't have independent locks like many other OSes do.  All locks are explicitly associated with a particular resource.  Jobs must list all resources they use so that scheduling priorities can be calculated at compile-time.  This effectively means that a CRECT application has N distinct lock types, used only by that application.  None of these locks are known to the maintainers of CRECT, and none of them are known to the C++ runtime.  Current compiler ABIs do not provide the C++ runtime with information about the type or address of the function static being initialized.

Some OSes aren't scheduled in a time-sliced manner.  Spin locks on these systems are a bad idea.  You could get in the middle of static initialization, get an interrupt that causes you to change threads, then get stuck on the initialization of the same static.  Forward progress will be halted until another interrupt happens at some indeterminate point in the future.

All of these concerns are also concerns with regards to signals.  [support.signal](https://wg21.link/support.signal) already calls out that locked atomics result in UB when invoked from a signal.  Dynamic initialization of a static variable is also UB when invoked from a signal.  If we are willing to make special rules for signals, shouldn't we be willing to make special rules for embedded and kernel... especially if the rules are largely the same?

Related works in progress, and future work {#other_work}
========================================================

[[P0709]] Zero-overhead deterministic exceptions {#p0709}
---------------------------------------------------------
Efforts were made to not design out static exceptions.  If we were to ignore static exceptions and other potential implementations of exceptions, we could provide an implementation of `uncaught_exceptions` that always returned 0.  This would enable `scope_success` and `scope_failure` out of [[P0052]].

[[P0784]] Standard containers and `constexpr` {#p0784}
------------------------------------------------------
In theory, any program (including kernel and embedded program) should be able to use `constexpr` containers.  However, the proposal for `constexpr` containers requires `std::allocator`.  Kernel and embedded systems may not want to provide `std::allocator` at runtime.  There aren't general purpose ways of providing constexpr classes at compile time without also providing them at runtime.  If this paper progresses, we may need to find a general purpose way of providing things at compile time, or we may need to find a special purpose way that will satisfy the `std::allocator` use case.  Note that if we only solve the special case, we will likely need to solve other special cases, like `std::vector`.

One possible avenue for the `std::allocator` special case is for the implementation to provide declarations of all the methods, but provide no implementations.  The declarations may prove sufficient for the `constexpr` use case, while triggering linker errors in the runtime case.

Or maybe, this could be tackled with conditionally `constexpr!` functions...

[[P1073]] `constexpr!` functions {#p1073}
--------------------------------------------------
P1073 provides a way to force a function to only be invokable at compile time.  Freestanding implementations could mark all `constexpr`, non-freestanding functions as `constexpr!`.

Common QoI issues {#qoi}
========================
Pure virtual functions {#pure_virtual}
--------------------------------------
In freestanding environments, compilers should prefer to fill in vtable slots for pure virtual functions with a null pointer, rather than with a pointer to a library support function (e.g. `__cxa_pure_virtual`).  The library support function takes up a small amount of space, all to support ease of debugging.

<pre class=biblio>
{
    "P0052": {
        "authors": ["Peter Sommerlad" , "Andrew L. Sandoval"],
        "href": "http://wg21.link/P0052",
        "title": "Generic Scope Guard and RAII Wrapper for the Standard Library"
    },
    "P0709": {
        "authors": ["Herb Sutter"],
        "href": "http://wg21.link/P0709",
        "title": "Zero-overhead deterministic exceptions: Throw values"
    },
    "P0784": {
        "authors": ["Louis Dionne", "Richard Smith", "Nina Ranns", "Daveed Vandevoorde"],
        "href": "http://wg21.link/P0784",
        "title": "Standard containers and constexpr"
    },
    "P0829": {
        "authors": ["Ben Craig"],
        "href": "http://wg21.link/P0829",
        "title": "Freestanding Proposal"
    },
    "P0829R0": {
        "authors": ["Ben Craig"],
        "href": "http://wg21.link/P0829R0",
        "title": "Freestanding Proposal (R0)"
    },
    "P1045": {
        "authors": ["David Stone"],
        "href": "http://wg21.link/P1045",
        "title": "constexpr Function Parameters"
    },
    "P1073": {
        "authors": ["Richard Smith", "Andrew Sutton", "Daveed Vandevoorde"],
        "href": "http://wg21.link/P1073",
        "title": "constexpr! functions"
    },
    "kernel_switch": {
        "authors": ["Microsoft Documentation"],
        "title": "/kernel (Create Kernel Mode Binary)",
        "href": "https://docs.microsoft.com/en-us/cpp/build/reference/kernel-create-kernel-mode-binary"
    },
    "CRECT": {
        "authors": ["Emil Fresk", "Odin Holmes", "Carlos van Rooijen"],
        "title": "crect: A C++, compile-time, reactive RTOS",
        "href": "https://github.com/korken89/crect"
    },
    "OSR": {
        "authors": ["The NT Insider"],
        "title": "Global Relief Effort - C++ Runtime Support for the NT DDK",
        "href": "http://www.osronline.com/article.cfm?article=57"
    }
}
</pre>
