<pre class='metadata'>
Title: Make Exceptions and Company Optional for Freestanding Implementations
Shortname: D0000
Revision: 0
Audience: SG14, EWG
Status: D
Group: WG21
URL: http://example.com/url-this-spec-will-live-at
!Source: <a href="https://github.com/ben-craig/freestanding_proposal/blob/master/core/optional_exceptions.bs">github.com/ben-craig/freestanding_proposal/blob/master/core/optional_exceptions.bs</a>
Editor: Ben Craig &lt;ben dot craig at gmail dot com&gt;
Abstract: Making core language features (like exceptions) optional in freestanding mode if they have an OS dependency or incur space overhead.
Markup Shorthands: markdown yes
</pre>

Introduction {#intro}
=====================

Introduction here.
Something about Embedded C++ and the Embedded Template Library


Features going optional {#features}
===================================
The following applies only to freestanding mode.  Hosted mode will remain unchanged.

Exceptions {#exceptions}
------------------------
This section applies to "dynamic" exceptions.  In other words, the exceptions we have had since C++98.  [[P0709]] could add "static" exceptions.  I am keeping static exceptions in mind with this design, but I'm not providing any wording against that proposal.

### Why make this optional? ### {#exception_why}
Kernel and embedded environments can't universally afford exceptions.  Throwing an exception requires a heap allocation on the Itanium ABI, and a large stack allocation in the Microsoft ABI, neither of which are suitable in kernel and embedded environments.  Throwing an exception requires TLS ([[#tls]]) in order to propagate the number of uncaught exceptions.  Windows, Linux, Mac, and FreeBSD don't allow drivers to store arbitrary TLS data, and they don't have any special handling for C++ specific TLS requirements, like the number of uncaught exceptions.

Even when exceptions aren't thrown, there is a large space cost.  Table based exception costs grows roughly in proportion to the size and complexity of the program, and not in the number of `throw` sites, `catch` sites, or frames traversed in an exception `throw`.  Since table based exception costs grows with program size, rather than how much it is used, it is not zero overhead.  `setjmp` / `longjmp` exception size costs are similar in these regards.

See [[P0709]] for further discussion on the problems with exceptions.

### What isn't changing? ### {#exception_same}
`try` and `catch` are both still allowed.  Compilers should treat `catch` blocks as unreachable code.  `try` and `catch` blocks are allowed so that exception neutral code can be shared between freestanding and hosted implementations without requiring preprocessor hackery.

### What am I changing (and why)? ### {#exception_what}
Evaluating a `throw` expression in an environment without exception support is undefined behavior.  We allow the programmer to compile with a `throw` to allow exception neutral code to be shared between freestanding and hosted implementations, but the `throw` shouldn't ever be evaluated, since we shouldn't be able to get into a `catch` block.  We allow `throw` expressions with operands so that programmers can do exception translation in environments with exceptions, with the expectation that the code won't ever be executed in exceptionless environments.  For `throw` expressions without operands, this will be a change in behavior.  A rethrow without an active exception currently calls `std::terminate`.  I don't call `std::terminate`, as `std::terminate` relies on the global terminate handler, and freestanding doesn't want to pay the cost of synchronizing the global terminate handler.

Implementations are encouraged to produce warnings on any `throw` expression with operands, as well as allow suppressions for informing the compiler when those `throw`s are actually there for exception translation purposes.

When a function without a `noexcept` specification is passed to a `noexcept` expression, `noexcept` will return true if exception support is not present.  This will speed up operations like `move_if_noexcept` and containers with strong exception guarantees.  This also differs somewhat from existing practices.  Visual Studio, clang, and gcc do not currently adjust the value of `noexcept` when exceptions are off.  The Intel compiler (with EDG frontend) makes the `noexcept` operator unconditionally return true when exceptions are turned off.  In addition, Visual Studio has a compiler mode, /EHsc, that takes `extern "C"` functions and makes them `noexcept`.  Note that this approach leaves the door open for static exceptions to use `noexcept`.

`noexcept(false)` code should be treated with suspicion.  This isn't normative, but it would be a useful place for compilers to warn.

The `<exception>` header is not required to be present.  Note that this removes `std::terminate` and `uncaught_exceptions`.

Types derived from `std::exception` are not required to be present in their respective headers.  

`std::visit` is no longer required to throw `std::bad_variant_access`, as it will now be impossible to get into the `valueless_by_exception` state.

`catch` blocks are treated the same as an `if constexpr(false)` block.  This is to allow some trivial exception translation to continue compiling.

### Alternative designs ### {#exception_alt}
1. No change to `noexcept` expression

  `noexcept` would continue to assume that a function without a `noexcept` specifier could throw.  We have the most experience with this option (Clang, gcc, and Visual Studio implement it), but it also leaves the most unexploited performance, as it pessimizes `move_if_noexcept`, `vector`, and other facilities that query `noexcept`.

2. `noexcept` expressions always return true

  Intel icc currently implements this option.  This opens us up to breakage if some other proposal gives meaning to `noexcept` on platforms without dynamic exceptions.  Having `noexcept` directly contradict a `noexcept(false)` specification seems wrong as well.

3. Make `noexcept` ill-formed

  Visual Studio currently warns when it sees a `noexcept` specifier while exceptions are disabled.  This option would make it very difficult to share code between freestanding and hosted.  Libraries attempting to target both would most likely resort to a macro that conditionally expands to `noexcept`.

4. `throw` UB vs. ill-formed

  We could make some or all `throw` expressions ill-formed.  The benefit is that compilers could more reliably produce diagnostics.  The cost is that it would be more difficult to share exception neutral code between hosted and freestanding.
  
RTTI {#rtti}
------------
### What am I changing? ### {#rtti_what}
`typeid` and `dynamic_cast` are ill-formed in environments without RTTI.  The `<typeinfo>` header is not required to be present.

### Why? ### {#rtti_why}
`type_info` objects generated by the compile consume space, and are difficult to optimize away.  In the implementations that I'm aware of, a class with virtual functions will have a spot in the vtable that points at the `type_info` object for the class.  If an instance of the class is every created, the linker isn't able to apply trivial dead data elimination techniques to get rid of the `type_info` object, as there exists a reference to the object from the vtable.

The slot in the vtable itself is also a place where space is wasted.

If `typeid` and `dynamic_cast` can't be called, implementations can safely remove the `type_info` objects, saving space.  Some ABIs will even permit reclaiming the vtable slot.

Default heap storage {#heap}
----------------------------
### What am I changing? ### {#heap_what}
On systems without default heap storage, neither the replaceable allocation functions nor the replaceable deallocation functions are provided by default.

The presence of a `virtual` destructor shall not require `::operator delete` to be provided unless an instance of the object is created with `new`.

### Why? ### {#heap_why}
Many embedded systems do not have a heap.  Such a system could provide an implementation of `::operator new` that immediately throws `bad_alloc`, but that would require pulling in all the exception handling machinery.  Returning `nullptr` would not be conforming, and would also take up a non-zero amount of space.

Many kernel systems have multiple pools of memory, none of which is suitable as a default.  In the Microsoft Windows kernel, developers have the choice of paged pool, which is plentiful and dangerous; and non-paged pool, which is safe and scarce.  The National Instruments codebase has had experience using each of those options as a default, and both have proven problematic.  The Microsoft Visual Studio compiler switch `/kernel` already implements the lack of default allocation functions. [[kernel_switch]]

In current implementations of `virtual` destructors, the class's vtable points at a stub function that calls the "real" destructor, then calls `::operator delete`.  This places a burden on freestanding users of hosted code, even when the freestanding users aren't using `new` and `delete`.  It seems reasonable to allow a freestanding class to have a `virtual` destructor, so long as the class is never `new`ed or `delete`ed.  Hosted uses of the class can `new` and `delete` all they want.


Thread local storage {#tls}
---------------------------
### What am I changing? ### {#tls_what}
Programs using the `thread_local` storage class specifier are ill-formed if the environment does not provide thread local storage.

### Why? ### {#tls_why}
Thread local storage requires cooperation from the operating system.

For embedded platforms, there may not be an operating system.  Implementing thread local storage on those platforms would be extra runtime overhead.

For kernel platforms, and drivers in particular, the operating system may be owned by a third party.  The third party may not provide arbitrary thread local storage for plugins.  Neither Linux, Microsoft Windows, Apple OSX, FreeBSD, nor OpenRTOS support arbitrary thread local storage in the kernel.

Floating point {#float}
-----------------------
### What am I changing? ### {#float_what}
The `float`, `double`, and `long double` types are ill-formed if the environment does not have floating point support.

`<cfloat>` is not required to be present in environments without floating point support.  `numeric_limits<floating point type>` is not required to be present in environments without floating point support.

### Why? ### {#float_why}
Many embedded processors do not have floating point units.  The cost for the first usage of floating point is very high, as that pulls in floating point emulation libraries.

In kernel environments, floating point operations are avoided.  The system call interface from user mode to kernel mode normally does a partial context switch, where it saves off the old values of registers, so that they can be restored when returning to user mode.  In order to make user / kernel transitions fast, operating systems usually don't save or restore the floating point state.  This means that using floating point in the kernel ends up corrupting the user mode program's floating point state.


Program start-up and termination {#startup_termination}
------------------------------------------------
### What isn't changing ### {#startup_termination_same}
[basic.start.main](http://wg21.link/basic.start.main) already makes start-up and termination implementation defined for freestanding implementations.  I interpret this as meaning that neither static initialization nor dynamic initialization is required to take place.  This also means that non-local object destruction is implementation defined.

### What am I changing? ### {#startup_termination_what}
The existence of `atexit`, `at_quick_exit`, `exit`, and `quick_exit` should also be implementation defined (i.e. optional).

### Why? ### {#startup_termination_why}
These functions require space overhead, and are difficult to optimize away.  Process termination code iterates over the contents of the `atexit` list, pinning the memory in place.

Function local statics {#function_statics}
------------------------------------------
### What am I changing? ### {#function_statics_what}

### Why? ### {#function_statics_why}


Locked atomics {#locked_atomics}
--------------------------------
### What am I changing? ### {#locked_atomics_what}

### Why? ### {#locked_atomics_why}
Spin locks on a tick-less OS are a bad idea.  You could get in the middle of static initialization, get an interrupt that causes you to change threads, then get stuck on the initialization of the same static.  Forward progress will be halted until another interrupt happens at some indeterminate point in the future.

Common QoI issues {#qoi}
=================
Pure virtual functions

<pre class=biblio>
{
    "P0709": {
        "authors": ["Herb Sutter"],
        "href": "http://wg21.link/P0709",
        "title": "Zero-overhead deterministic exceptions: Throw values"
    },
    "kernel_switch": {
        "authors": ["Microsoft Documentation"],
        "title": "/kernel (Create Kernel Mode Binary)",
        "href": "https://docs.microsoft.com/en-us/cpp/build/reference/kernel-create-kernel-mode-binary"
    }
}
</pre>
