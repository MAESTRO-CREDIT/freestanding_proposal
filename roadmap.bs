<pre class='metadata'>
Title: Freestanding Roadmap
Shortname: TODO
Revision: 0.0
Audience: SG14
Status: D
Group: WG21
URL: https://TODO
!Source: <a href="https://github.com/ben-craig/freestanding_proposal/blob/master/TODO.bs">github.com/ben-craig/freestanding_proposal/blob/master/TODO.bs</a>
Editor: Ben Craig, National Instruments, ben.craig@gmail.com
Abstract: Describe future, high level freestanding papers
Markup Shorthands: markdown yes
</pre>

Revision History {#revision_history}
====================================
R0 {#r0}
-------
Initial revision.

Introduction {#intro}
=====================

Work in progress {#wip}
=====================
* [[P2013]] Freestanding Language: Optional `::operator new`
P2013R1 is awaiting further EWG review.
EWG reviewed P2013R0 favorably in the 2020 Prague meeting, and requested wording.
Wording is present and ready for review in P2013R1.

* [[P1642]] Freestanding Library: Easy [utilities], [ranges], and [iterators]
P1642R4 combines the wording in P1641R3 and the library additions from P1642R3.
P1642R4 is awaiting further LEWG review.

The non-feature test macro parts of P1641R3 and P1642R3 were reviewed favorably over LEWG telecon.
LEWG requested that those parts be combined into a single paper, and that LEWG not spend future time discussing the contents of the library additions.

* [[P2198]] Freestanding Feature-Test Macros and Implementation-Defined Extensions
P2198R0 has taken all the feature-test macro parts from P1642R3 and P1641R3, and consolidated them here.
P2198R0 needs to be reviewed by SG10, as it is doing something more involved than just including a feature test macro.

Related work in progress {#related_wip}
=====================
* [[P0581]] Standard Library Modules
The way we partition the standard library into modules has the potential to change how freestanding is advertised and messaged significantly.
The partitioning could also place new constraints on freestanding.

Library additions {#library_add}
=====================
* constexpr -> consteval
discussed in core

* <cstdlib>, <charconv>, <cmath>, <cinttypes>, char_traits, parts of cstring and cwchar
Address int + float overloads, probably with =delete
Address the issue of adding things to C++ freestanding that are not in C freestanding

* [diagnostics], algorithm, numeric, lock_guard, unique_lock, span
All the error #defines in <cerrno>, but not errno.
The errc enum from <system_error>. 
Would be better with the previous paper, because of algorithm memcpy optimizations

* Partial classes
array, string_view, variant, optional, bitset

For most of the throwing functions, an =delete should do the trick.
bitset is hard, because it has std::string in the interface.

string_view is blocked on char_traits and cstring

* random
This paper would need to deal with the specification hurdles of the hidden friend op<<.

* [time]
* Need to deal with systems that don't have clocks that the OS knows about.


Core changes {#core_changes}
=====================
Likely {#likely}
---------------
* startup and termination
* Destructor call reason
** Allow an alternate destructor signature that takes a bool (or enum).
** Parameter would indicate whether the dtor was called because of unwinding, or normal execution
** Only one dtor allowed per class
** Classes with bool dtor can be locals, or contained in other classes with bool dtors.
** Classes without bool dtor can be members of classes with bool dtor.
* Non-local exception objects
** Need some way to get a std::exception_ptr, or std::exception_ptr-like object from a catch statement, without relying on TLS.
** Needs to be able to address transporting exceptions across threads.
** Needs to be able to address Lippincott functions.

Somewhat Likely {#somewhat_likely}
------------------
* terminate
* exception header
* thread_local
** maybe have a replaceable thread id extension point
** Would need to couple that with lifetime control somehow
** And make sure it doesn't screw over hosted implementations
** Maybe this can use some of the extension points from startup and termination to define the thread local space

Hard {#hard}
-----------
* RTTI
* floating point
* Locked atomics
* thread safe statics

Super hard {#super_hard}
-------------------
* Error handling

Applied papers and issues {#papers_and_issues}
==========================================
* [[LWG3148]] <concepts> should be freestanding
* [[P1855]] Make <compare> freestanding 

Retired papers {#retired}
======================
* [[P0829]] Freestanding Proposal
P0829 was too large to be effectively reviewed, so it has been split up.
P1641, P1642, and P2198 are the current successors to P0829, but more are needed.
See [[library_add]] for some of the other papers that still need to be authored.

* [[P1641]] Freestanding Library: Rewording the Status Quo
Most of the wording aspects of this paper have moved to P1642, and the feature test macro parts have moved to P2198.

* [[P1105]] Leaving no room for a lower-level language: A C++ Subset
P1105 was meant to describe a direction.
Follow-on papers were meant to act on that direction.
P2013 is one such paper.
[[core_changes]] describes other possible future papers.

When SG1 reviewed this paper in the 2018 San Diego meeting, they reacted favorably to the thread_local parts, and unfavorably to the locked atomics and thread safe static parts.

* [[P1212]] Modules and freestanding
This paper was a reaction to [[P0581]].
One of the questions this paper asked was to put the language support facilities that require an operating system in a different module from the freestanding facilities.
EWG was opposed to this direction in the San Diego 2018 meeting.
The author's position regarding freestanding and standard library modules has changed significantly since the San Diego 2018 meeting.

* [[P1372]] Giving atomic_ref implementers more flexibility by providing customization points for non-lock-free implementation
This paper was not received favorably by SG1 in San Diego's 2018 meeting.

Acknowledgments {#ack}
======================

<pre class=biblio>
{
    "P1105R1": {
        "authors": ["Ben Craig", "Ben Saks"],
        "title": "Leaving no room for a lower-level language: A C++ Subset",
        "href": "https://wg21.link/P1105R1"
    }
}
</pre>
