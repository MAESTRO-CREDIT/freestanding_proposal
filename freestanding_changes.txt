C++17:
<cstdlib> (partial)
<ciso646>
21.2 Types <cstddef>
21.3 Implementation properties <cfloat> <limits> <climits>
21.4 Integer types <cstdint>
21.5 Start and termination <cstdlib>
21.6 Dynamic memory management <new>
21.7 Type identification <typeinfo>
21.8 Exception handling <exception>
21.9 Initializer lists <initializer_list>
21.10 Other runtime support <cstdarg>
23.15 Type traits <type_traits>
Clause 32 Atomics <atomic>
D.4.2, D.4.3 Deprecated headers <cstdalign> <cstdbool>


Proposed:
*<cstddef>
-<cfloat>
<limits>
	-numeric_limits<float>
	-numeric_limits<double>
	-numeric_limits<long double>
*<climits>
*<cstdint>
<cstdlib>
	+size_t
	+div_t
	+ldiv_t
	+lldiv_t
	+NULL
	+EXIT_FAILURE
	+EXIT_SUCCESS
	#RAND_MAX
	#MB_CUR_MAX
	*abort
	-atexit
	-at_quick_exit
	-exit
	+_Exit
	-quick_exit
	#getenv
	#system
	
	#aligned_alloc
	#calloc
	#free
	#malloc
	#realloc
	
	#atof
	+atoi
	+atol
	+atoll
	#strtod
	#strtof
	#strtold
	?locale and errno usage in strtoxxx
	#strtol
	#strtoll
	#strtoul
	#strtoull
	
	#mblen
	#mbtowc
	#wctomb
	#mbstowcs
	#wcstombs
	
	+bsearch
	+qsort
	#rand
	#srand
	
	+abs(int)
	+abs(long int)
	+abs(long long int)
	+labs
	+div
	+ldiv
	+lldiv
<new>
	-bad_alloc
	-bad_array_new_length
	?align_val_t
	*nothrow_t
	*nothrow
	-new_handler
	-get_new_handler
	-set_new_handler
	*launder
	-hardware_destructive_interference_size
	-hardware_constructive_interference_size
	-[new.delete.single] (throwing)
	-[new.delete.array] (throwing)
	*[new.delete.single] (nothrow)
	*[new.delete.array] (nothrow)
	*[new.delete.placement]
-<typeinfo>
-<exception>
	TODO: see what stuff calls terminate
		parallel algorithms... but only when exceptions are on
*<initializer_list>
*<cstdarg>
#<csetjmp>
#<csignal>
#<stdexcept>
#<cassert>
	Because assert requires a stderror stream
+<cerrno>
	-errno
+<system_error>
	-operator<<(basic_ostream & const error_code &)
	-error_code::message
	-error_condition::message
	-system_error
+<utility>
+<tuple>
#<optional>
#<variant>
#<any>
#<bitset>
	lots of string ops (could be blacklisted)
	indexed operations throw out_of_range
	-string ctors
	-operator>>
	-operator<<
	-to_string
	"bitset2" would be pretty straightforward given a starting point of bitset.
<memory>
	+pointer_traits
	+align
	&&& default allocator may start static_asserting
	+addressof
	+specialized algorithms
	+unique_ptr
	&&& default_delete
	# make_unique
	? hash<unique_ptr>
#<memory_resource>
#<scoped_allocator>
+<functional>
	- polymorphic function wrappers
*<type_traits>
+<ratio>
#<chrono>
#<type_index>
	RTTI and typeinfo requirement
+<execution>
	why not?
?<charconv>
	+to_chars(int)
		this will pull in error_code
	+from_chars(int)
+<string>
	+char_traits
+<string_view>
	- operator<<
	+string_view
		-at
		-copy
		-substr
		-compare
		+compare(string_view)
		+compare(const charT*)
#<cctype>
#<cwtype>
	avoiding locales
+<cstring>
	+memcpy
	+memmove
	+strcpy
	+strncpy
	+strcat
	+strncat
	+memcpm
	+strcmp
	-strcoll
	+strncmp
	-strxfrm
	+memchr
	+strchr
	+strcspn
	+strpbrk
	+strpbrk
	+strrchr
	+strspn
	+strstr
	-strtok
	+memset
	-strerror
	+strlen
+<cwchar>
	+wcscpy
	+wcsncpy
	+wmemcpy
	+wmemmove
	+wcscat
	+wcsncat
	+wcscmp
	+wcsncmp
	+wmemcmp
	+wcschr
	+wcscspn
	+wcxpbrk
	+wcsrchr
	+wcsspn
	+wcsstr
	+wcstok
	+wmemchr
	+wcslen
	+wmemset
#<locale>
#<clocale>
+<array>
	-std::array::at
+<iterator>
	-istream_iterator
	-istreambuf_iterator
	-ostream_iterator
	-ostreambuf_iterator
	-back_insert_iterator
	-front_insert_iterator
+<algorithm>
	?ExecutionPolicy overloads?
	See Meyers Eff STL for list of stable sorting algorithms
	?stable_partition (internal heap alloc?)
	?stable_sort
	?inplace_merge (has provisions for oom, so maybe keep it?)
#<cfenv>
#<complex>
+<random>
	+linear_congruential_engine [rand.eng.lcong]
	+mersenne_twister_engine [rand.eng.mers]
	+subtract_with_carry_engine [rand.eng.sub]
	+discard_block_engine [rand.adapt.disc]
	+independent_bits_engine [rand.adapt.ibits]
	+shuffle_order_engine [rand.adapt.shuf]
	+ [rand.predef]
	-random_device [rand.device]
	+seed_seq [rand.util.seedseq]
	-generate_canonical [rand.util.canonical] ***
	+uniform_int_distribution [rand.dist.uni.int]
	-uniform_real_distribution [rand.dist.uni.real]
	-bernoulli_distribution [rand.dist.bern.bernoulli] ***
	-binomial_distribution ***
	-geometric_distribution ***
	-negative_binomial_distribution ***
	-poisson_distribution ***
	-exponential_distribution
	-gamma_distribution
	-weibull_distribution
	-extreme_value_distribution
	-normal_distribution
	-lognormal_distribution
	-chi_squared_distribution
	-cauchy_distribution
	-fisher_f_distribution
	-student_t_distribution
	-discrete_distribution ***
	-piecewise_constant_distribution
	-piecewise_linear_distribution
#<valarray>
+<numeric>
#<cmath>
	Almost entirely full of floating point math
	+abs(int)
	+abs(long int)
	+abs(long long int)
#<iosfwd>
#<iostream>
#<ios>
#<streambuf>
#<istreadm>
#<ostream>
#<iomanip>
#<sstream>
#<fstream>
#<filesystem>
#<cstdio>
#<cinttypes>
	+imaxabs
	+imaxdiv
	+abs(intmax_t)
	+div(intmax_t, intmax_t)
#<regex>
*<atomic>
#<thread>
#<mutex>
#<shared_mutex>
#<condition_variable>
#<future>
